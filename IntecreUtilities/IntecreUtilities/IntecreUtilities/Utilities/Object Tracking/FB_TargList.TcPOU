<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_TargList" Id="{618d746f-d289-47af-ba3d-b2ba9dc07772}" SpecialFunc="None">
    <Declaration><![CDATA[// List of Strings.
FUNCTION_BLOCK FB_TargList
VAR
   List : ARRAY[0..GVL_List.LIST_SIZE - 1] OF T_Arg; // hold list
   _Count : UDINT := 0; // number of items.
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddItem" Id="{9e016b54-56df-4e2b-85b0-f604d5c30bc0}">
      <Declaration><![CDATA[// Add item to list. TRUE if successful. 
METHOD PUBLIC AddItem : BOOL
VAR_INPUT
   Item : T_Arg; // item to add.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Count < GVL_List.LIST_SIZE THEN
   List[_Count] := Item; // list is zero indexed, so number of items points at next free space.
   _Count := _Count + 1;
   AddItem := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{8f768700-0070-4763-b654-ecdb9354e2b8}">
      <Declaration><![CDATA[// Removes all list items
METHOD PUBLIC Clear]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMSET(ADR(List[0]), 0, SIZEOF(List));
_Count := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{924f2197-aee4-4a0e-a924-ceba24bd6410}">
      <Declaration><![CDATA[// TRUE if Item is in FB_List.
METHOD PUBLIC Contains : BOOL
VAR_INPUT
   Item : T_Arg; // Item to check.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Contains := FindIndex(Item) >= 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{ea805cf5-f90e-4089-a198-e5f95d09b44b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
// Number of items in list.
PROPERTY PUBLIC Count : UDINT]]></Declaration>
      <Get Name="Get" Id="{d9137fce-ae3e-4123-bd30-4446a91b9690}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := _Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FindIndex" Id="{a804a17e-940b-4212-abfe-c9f67ce123f8}">
      <Declaration><![CDATA[METHOD PUBLIC FindIndex : INT
VAR_INPUT
   Item : T_Arg; // Item to check.
END_VAR
VAR
   i : UINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FindIndex := -1;
i := 0;

WHILE ((FindIndex < 0) AND (i < _Count)) DO

   FindIndex := SEL(F_ARGCMP(TRUE, Item, List[i]) = 0, FindIndex, TO_INT(i)); // if it matches, return the position.
   i := i + 1;

END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIndex" Id="{62e1a232-c66b-48da-8ffe-c2567273ec59}">
      <Declaration><![CDATA[// Return item in list at index position. Returns empty string if invalid index.
METHOD PUBLIC GetIndex : T_Arg
VAR_INPUT
   Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.TryGetIndex(Index, GetIndex);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveIndex" Id="{8615e590-49d3-42f1-be26-373da1e4c532}">
      <Declaration><![CDATA[//Remove the specified index. Shuffle remaining so list is intact.
METHOD PUBLIC RemoveIndex : BOOL
VAR_INPUT
   Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index >= _Count THEN // invalid index request.
   RETURN;
END_IF

IF Index < _Count - 1 THEN // If Index = _Count -1, last two lines sufficient.

   MEMMOVE(
      destAddr := ADR(List[Index]),
      srcAddr := ADR(List[Index + 1]),
      n := SIZEOF(List[0]) * (_Count - Index - 1)
   );

END_IF

RemoveIndex := TRUE;
MEMSET(ADR(List[_Count - 1]), 0, SIZEOF(T_Arg));
_Count := _Count - 1; // reduce count.]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetIndex" Id="{1131e0e2-5709-420c-ad2b-868ce8b81f75}">
      <Declaration><![CDATA[// TRUE if successful and list item in sItem
METHOD PUBLIC TryGetIndex : BOOL
VAR_INPUT
   Index : UDINT;
END_VAR
VAR_IN_OUT
   Item : T_Arg;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < _Count THEN
   TryGetIndex := TRUE;
   Item := List[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_TargList">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_TargList.AddItem">
      <LineId Id="40" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TargList.Clear">
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TargList.Contains">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TargList.Count.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_TargList.FindIndex">
      <LineId Id="57" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TargList.GetIndex">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TargList.RemoveIndex">
      <LineId Id="89" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TargList.TryGetIndex">
      <LineId Id="47" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>