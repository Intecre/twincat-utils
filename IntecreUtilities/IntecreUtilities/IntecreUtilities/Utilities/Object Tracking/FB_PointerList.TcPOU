<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_PointerList" Id="{cf4de339-0e99-4d2b-8c7a-54ce898dfd52}" SpecialFunc="None">
    <Declaration><![CDATA[// List of UDINTs.
FUNCTION_BLOCK FB_PointerList
VAR
   List : ARRAY[0..GVL_List.LIST_SIZE - 1] OF PVOID; // hold list
   _Count : UDINT := 0; // number of items.
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddItem" Id="{d54d03f0-8ffe-45d9-9627-60e9c4adc15a}">
      <Declaration><![CDATA[// Add item to list. TRUE if successful. 
METHOD PUBLIC AddItem : BOOL
VAR_INPUT
   Item : PVOID; // item to add.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _Count < GVL_List.LIST_SIZE THEN
   List[_Count] := Item; // list is zero indexed, so number of items points at next free space.
   _Count := _Count + 1;
   AddItem := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{fa6a092b-8e0d-44e0-a255-e4267043dc44}">
      <Declaration><![CDATA[// Removes all list items
METHOD PUBLIC Clear]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMSET(ADR(List[0]), 0, SIZEOF(List));
_Count := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Contains" Id="{40351be9-98a5-4ce3-8796-26157b52a52c}">
      <Declaration><![CDATA[// TRUE if sItem is in FB_List.
METHOD PUBLIC Contains : BOOL
VAR_INPUT
   Item : PVOID; // Item to check.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Contains := FindIndex(Item) >= 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{f0f2efff-ff0a-4b3b-ace2-3c2fe6d7fe0b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
// Number of items in list.
PROPERTY PUBLIC Count : UDINT]]></Declaration>
      <Get Name="Get" Id="{3c56af6a-8445-4bac-a0f6-36b937233719}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := _Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FindIndex" Id="{c5db8f12-7c2f-4304-b719-247e3ec1a745}">
      <Declaration><![CDATA[METHOD PUBLIC FindIndex : INT
VAR_INPUT
   Item : PVOID; // Item to check.
END_VAR
VAR
   i : UINT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FindIndex := -1;
i := 0;

WHILE ((FindIndex < 0) AND (i < _Count)) DO

   FindIndex := SEL(Item = List[i], FindIndex, TO_INT(i)); // if it matches, return the position.
   i := i + 1;

END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetIndex" Id="{2495e298-bdc3-4cf7-aa60-28a0e73773cd}">
      <Declaration><![CDATA[// Return item in list at index position. Returns empty string if invalid index.
METHOD PUBLIC GetIndex : PVOID
VAR_INPUT
   Index : PVOID;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.TryGetIndex(Index, GetIndex);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveIndex" Id="{33bddad0-bbd9-44ec-808b-aa44ba444292}">
      <Declaration><![CDATA[//Remove the specified index. Shuffle remaining so list is intact.
METHOD PUBLIC RemoveIndex : BOOL
VAR_INPUT
   Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index >= _Count THEN // invalid index request.
   RETURN;
END_IF

IF Index < _Count - 1 THEN // If Index = _Count -1, last two lines sufficient.

   MEMMOVE(
      destAddr := ADR(List[Index]),
      srcAddr := ADR(List[Index + 1]),
      n := SIZEOF(List[0]) * (_Count - Index - 1)
   );

END_IF

List[_Count - 1] := 0; // default the "old" end of the list.
_Count := _Count - 1; // reduce count.
RemoveIndex := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetIndex" Id="{638f1091-5991-412a-ae83-31ef81ffea5b}">
      <Declaration><![CDATA[// TRUE if successful and list item in sItem
METHOD PUBLIC TryGetIndex : BOOL
VAR_INPUT
   Index : PVOID;
END_VAR
VAR_IN_OUT
   Item : PVOID;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < _Count THEN
   TryGetIndex := TRUE;
   Item := List[Index];
ELSE
   Item := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_PointerList">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_PointerList.AddItem">
      <LineId Id="40" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PointerList.Clear">
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PointerList.Contains">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PointerList.Count.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PointerList.FindIndex">
      <LineId Id="57" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PointerList.GetIndex">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PointerList.RemoveIndex">
      <LineId Id="94" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PointerList.TryGetIndex">
      <LineId Id="53" Count="4" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>