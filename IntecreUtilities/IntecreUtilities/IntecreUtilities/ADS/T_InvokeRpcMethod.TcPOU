<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="T_InvokeRpcMethod" Id="{61e4e0cc-2491-4f76-aa9c-716399cb6a5e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK T_InvokeRpcMethod EXTENDS T_NamedBase IMPLEMENTS I_TaskState;
VAR
   getHandle : T_GetHandle;
   callMethod : T_CallMethod;
   releaseHandle : T_ReleaseHandle;
   _symbolHandle : ST_SymbolHandle;

   {attribute 'to_String'}
   state, prevState : (
      IDLE,
      GET_HANDLE,
      CALL_METHOD,
      RELEASE_HANDLE,
      DONE_STATE,
      ERROR_STATE
   ) := IDLE;
END_VAR

VAR CONSTANT
   LOG_DEBUG : DWORD := 0;
   LOG_INFO : DWORD := ADSLOG_MSGTYPE_HINT;
   LOG_WARNING : DWORD := ADSLOG_MSGTYPE_WARN;
   LOG_ERROR : DWORD := ADSLOG_MSGTYPE_ERROR;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE state OF
   IDLE:
      IsEntryActionAndLog();

   GET_HANDLE:

      IF IsEntryActionAndLog() THEN
         getHandle.TryGetHandle(_symbolHandle, DEFAULT_ADS_TIMEOUT);
      ELSE

         IF getHandle.Error THEN
            LogError(CONCAT('Error gettng symbol handle for method ', _symbolHandle.SymbolAddress.SymbolName));
            state := ERROR_STATE;

         ELSIF getHandle.Done THEN
            LogDebug(CONCAT('Get handle success for method ', _symbolHandle.SymbolAddress.SymbolName));
            state := CALL_METHOD;

         END_IF

      END_IF

   CALL_METHOD:

      IF IsEntryActionAndLog() THEN
         callMethod.TryMethodCall(_symbolHandle, DEFAULT_ADS_TIMEOUT);

      ELSE
         IF callMethod.Error THEN
            LogError(CONCAT('Error calling method ', _symbolHandle.SymbolAddress.SymbolName));
            state := ERROR_STATE;

         ELSIF callMethod.Done THEN
            LogDebug(CONCAT('Call method done for  ', _symbolHandle.SymbolAddress.SymbolName));
            state := RELEASE_HANDLE;
         END_IF

      END_IF

   RELEASE_HANDLE:

      IF IsEntryActionAndLog() THEN
         releaseHandle.TryReleaseHandle(_symbolHandle, DEFAULT_ADS_TIMEOUT);

      ELSE
         IF releaseHandle.Error THEN
            LogError(CONCAT('Error releasing handle for ', _symbolHandle.SymbolAddress.SymbolName));
            state := ERROR_STATE;

         ELSIF releaseHandle.Done THEN
            LogDebug(CONCAT('Release handle done for  ', _symbolHandle.SymbolAddress.SymbolName));
            state := DONE_STATE;

         END_IF

      END_IF

   DONE_STATE:
      IsEntryActionAndLog();

   ERROR_STATE:

      IF IsEntryActionAndLog() THEN
         LogError(CONCAT('Error during InvokeMethod of ', _symbolHandle.SymbolAddress.SymbolName));

      END_IF

END_CASE

getHandle();
callMethod();
releaseHandle();]]></ST>
    </Implementation>
    <Property Name="Busy" Id="{6147b952-046e-4443-8220-3418a1c38776}">
      <Declaration><![CDATA[PROPERTY Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{31d184c0-f09b-4316-9bad-6261f4eebd55}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy :=
   NOT Done
   AND NOT Error
   AND state <> IDLE;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Done" Id="{fcd35eda-910e-47d6-b084-820a9f79e69b}">
      <Declaration><![CDATA[PROPERTY Done : BOOL
]]></Declaration>
      <Get Name="Get" Id="{7d99f295-0f60-4c6f-9910-bb67993f1cc8}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := state = DONE_STATE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{8837bed8-5d83-48f7-b658-46e981fa964e}">
      <Declaration><![CDATA[PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{82bc3cd1-37c6-471e-8ee7-950c427b1040}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := state = ERROR_STATE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IsEntryActionAndLog" Id="{d8187eaa-c32c-484b-98f3-752337347e09}">
      <Declaration><![CDATA[METHOD PRIVATE IsEntryActionAndLog : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsEntryActionAndLog := prevState <> state;

IF NOT IsEntryActionAndLog THEN
   RETURN;
END_IF

LogDebug(
   Msg := F_Concat3(TO_STRING(prevState), ' transition to state ', TO_STRING(state))
);

prevState := state;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryInvokeMethodCall" Id="{d6e47d1f-b9b8-482a-84db-5235826b8885}">
      <Declaration><![CDATA[METHOD TryInvokeMethodCall : BOOL
VAR_INPUT
   symbolHandle : ST_SymbolHandle;
   adsTimeout : TIME := DEFAULT_ADS_TIMEOUT; // DEFAULT_ADS_TIMEOUT is T#5s;
END_VAR
VAR_OUTPUT
   status : I_TaskState;
END_VAR
VAR CONSTANT
   NO_HANDLE : DWORD := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Busy THEN
   LogWarning('Cannot TryGetHandle as Busy');
   RETURN;

END_IF

_symbolHandle := symbolHandle;
state := GET_HANDLE;

status := THIS^;
TryInvokeMethodCall := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="T_InvokeRpcMethod">
      <LineId Id="1126" Count="70" />
      <LineId Id="151" Count="0" />
    </LineIds>
    <LineIds Name="T_InvokeRpcMethod.Busy.Get">
      <LineId Id="21" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="T_InvokeRpcMethod.Done.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_InvokeRpcMethod.Error.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_InvokeRpcMethod.IsEntryActionAndLog">
      <LineId Id="75" Count="10" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="T_InvokeRpcMethod.TryInvokeMethodCall">
      <LineId Id="163" Count="9" />
      <LineId Id="26" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>